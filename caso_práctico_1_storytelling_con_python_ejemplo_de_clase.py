# -*- coding: utf-8 -*-
"""Caso Práctico 1: Storytelling con Python - ejemplo de clase.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Cbw_fuS_BuQm7FxlobOux6QXtosrkz-j

# 1. Cargar los datos

## Conectar con Google Drive
"""

# Conectar con Google Drive: esto sirve para conectar con Google Drive y poder gestionar archivos
from google.colab import drive
drive.mount('/content/drive')

"""Importar librerías


"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

# Configuración de estilos
sns.set(style="whitegrid")
# %matplotlib inline

"""## Cargar el Dataset

**ATENCIÓN: Debes guardar los datos en tu Drive y poner aquí debajo la ruta!**
"""

path = "/content/drive/MyDrive/Docencia/datos/WHR2023.csv" # Ruta a donde hayáis puesto los datos en vuestro Google Drive
happiness_df = pd.read_csv(path)

# Mostrar las primeras filas del dataset
print(happiness_df.head())

"""Para que esto funcione debo tener el archivo en la ruta

# 2 Exploración y Limpieza de Datos
"""

# Verificar la estructura del dataset
print(happiness_df.info())

"""Eliminamos las columnas que no nos interesan

"""

happiness_df.columns

# Renombrar columnas para mayor claridad
happiness_df = happiness_df.rename(columns={
    'Country name': 'Country',
    'Ladder score': 'Score',
    'Logged GDP per capita': 'Logged_GDP_per_capita',
    'Social support': 'Social_support',
    'Healthy life expectancy': 'Healthy_life_expectancy',
    'Freedom to make life choices': 'Freedom',
    'Perceptions of corruption': 'Corruption'
})

# Nos quedamos solo con las columnas que nos interesan
happiness_df = happiness_df[["Country", "Score", "Logged_GDP_per_capita",
                             "Social_support", "Healthy_life_expectancy",
                             "Freedom", "Generosity", "Corruption"]].copy()

happiness_df.head()

"""Vemos si hay valores nulos"""

# Verificar valores nulos
print(happiness_df.isnull().sum())

"""Hay algún valor nulo, así que lo eliminamos"""

# Eliminar filas con valores nulos
happiness_df = happiness_df.dropna()

# Mostrar las primeras filas después de la limpieza
print(happiness_df.head())

"""Los valores de las variables `Healthy_life_expectancy` y `Logged_GDP_per_capita` son muy grandes comparados con los de otras variables, así que las normalizamos para que estén entre 0 y 1"""

# Normalizar Healthy_life_expectancy y Logged_GDP_per_capita para que estén entre 0 y 1
happiness_df["normalized_Healthy_life_expectancy"] = (happiness_df["Healthy_life_expectancy"] - happiness_df["Healthy_life_expectancy"].min()) / (happiness_df["Healthy_life_expectancy"].max() - happiness_df["Healthy_life_expectancy"].min())
happiness_df["normalized_logged_GDP_per_capita"] = (happiness_df["Logged_GDP_per_capita"] - happiness_df["Logged_GDP_per_capita"].min()) / (happiness_df["Logged_GDP_per_capita"].max() - happiness_df["Logged_GDP_per_capita"].min())

happiness_df.to_csv("/content/WHR2023_clean.csv",
                    header=True, index=False)

"""# 3. Visualizaciones de ejemplo

## Visualización del Contexto: Mapa Mundial de Felicidad
"""

# Crear un mapa mundial interactivo utilizando Plotly
fig = px.choropleth(
    happiness_df,
    locations="Country",
    locationmode='country names',
    color="Score",
    hover_name="Country",
    color_continuous_scale=px.colors.sequential.Viridis,
    title='Mapa Mundial de Felicidad (World Happiness Report)'
)

fig.show()

"""## Visualización de la Resolución: Proyección de Mejora de Felicidad"""

# Supongamos que la implementación de políticas mejora ciertos factores en un 10%
happiness_df['normalized_logged_GDP_per_capita_proj'] = happiness_df['normalized_logged_GDP_per_capita'] * 1.10
happiness_df['Social_support_proj'] = happiness_df['Social_support'] * 1.10
happiness_df['normalized_Healthy_life_expectancy_proj'] = happiness_df['normalized_Healthy_life_expectancy'] * 1.10
happiness_df['Freedom_proj'] = happiness_df['Freedom'] * 1.10
happiness_df['Generosity_proj'] = happiness_df['Generosity'] * 1.10
happiness_df['Corruption_proj'] = happiness_df['Corruption'] * 0.90  # Reducir corrupción

# Recalcular el Score proyectado usando un modelo simplificado (ponderaciones iguales)
happiness_df['Score_proj'] = (
    happiness_df['normalized_logged_GDP_per_capita_proj'] +
    happiness_df['Social_support_proj'] +
    happiness_df['normalized_Healthy_life_expectancy_proj'] +
    happiness_df['Freedom_proj'] +
    happiness_df['Generosity_proj'] +
    happiness_df['Corruption_proj']
) / 6

# Recalcular el Score original con el mismo modelo simplificado (ponderaciones iguales)
happiness_df['Score_recalculado'] = (
    happiness_df['normalized_logged_GDP_per_capita'] +
    happiness_df['Social_support'] +
    happiness_df['normalized_Healthy_life_expectancy'] +
    happiness_df['Freedom'] +
    happiness_df['Generosity'] +
    happiness_df['Corruption']
) / 6

# Crear un gráfico de líneas para comparar los Scores actuales y proyectados
top_10 = happiness_df.sort_values('Score', ascending=False).head(10)

plt.figure(figsize=(14,8))
sns.lineplot(data=top_10, x='Country', y='Score_recalculado', marker='o', label='Actual')
sns.lineplot(data=top_10, x='Country', y='Score_proj', marker='x', linestyle='--', label='Proyectado')
plt.title('Proyección de Mejora de Felicidad para los Top 10 Países', fontsize=16)
plt.ylabel('Score de Felicidad')
plt.xlabel('País')
plt.legend()
plt.xticks(rotation=45)
plt.show()

"""## Visualización de ejemplo: Heatmap de Correlaciones"""

# Calcular la matriz de correlación
corr = happiness_df[['Score', 'Logged_GDP_per_capita', 'Social_support',
                     'Healthy_life_expectancy', 'Freedom', 'Generosity',
                     'Corruption']].corr()

# Crear el heatmap
plt.figure(figsize=(10,8))
sns.heatmap(corr, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Heatmap de Correlaciones entre Factores y Felicidad', fontsize=16)
plt.show()

"""Si observamos la primera fila, el PIB, soporte social, esperanza de vida saludable y libertad están positivamente correlacionadas con el score de felicidad. Y la percepción de la corrupción está negativamente correlacionada

## Visualización de ejemplo: dos variables con los datos anómalos señalados
"""

# Conflict Visualization
conflict_countries = happiness_df[(happiness_df['Healthy_life_expectancy'] > happiness_df['Healthy_life_expectancy'].quantile(0.6)) &
                        (happiness_df['Score'] < happiness_df['Score'].quantile(0.25))]

# Plot
plt.figure(figsize=(10,6))
plt.scatter(happiness_df['Healthy_life_expectancy'], happiness_df['Score'], alpha=0.3)
plt.scatter(conflict_countries['Healthy_life_expectancy'], conflict_countries['Score'],
            color='red')

# Señalar los datos anómalos
for idx, row in conflict_countries.iterrows():
    plt.text(row['Healthy_life_expectancy'], row['Score'], row['Country'])
plt.title('Países con esperanza de vida alta pero baja felicidad')
plt.xlabel('Healthy Life Expectancy')
plt.ylabel('Happiness Score')
plt.grid(True)
plt.show()

"""## Visualización de ejemplo: Factores que Afectan la Felicidad

Quiero crear un gráfico de barras en los que se muestre la media de algunos factores para dos grupos de países: los países con alta felicidad y los países con baja felicidad. Así podré ver cómo esos factores afectan a la felicidad.

Primero, separamos en 2 dataframes los países con alta y con baja felicidad
"""

# Definir cuartiles para clasificar alta y baja felicidad
quantiles = happiness_df['Score'].quantile([0.25, 0.75])
low_threshold = quantiles[0.25]
high_threshold = quantiles[0.75]

# Clasificar países
happiness_df['Happiness_Level'] = happiness_df['Score'].apply(
    lambda x: 'Alta Felicidad' if x >= high_threshold else ('Baja Felicidad' if x <= low_threshold else 'Mediana Felicidad')
)

# Filtrar solo los países con alta y baja felicidad
high_happiness = happiness_df[happiness_df['Happiness_Level'] == 'Alta Felicidad']
low_happiness = happiness_df[happiness_df['Happiness_Level'] == 'Baja Felicidad']

high_happiness.head()

low_happiness.head()

# Calcular promedios de factores

factors = ["normalized_logged_GDP_per_capita", "normalized_Healthy_life_expectancy",
           'Social_support', 'Freedom', 'Generosity', 'Corruption']

high_avg = high_happiness[factors].mean()
low_avg = low_happiness[factors].mean()

# Crear DataFrame para el gráfico
comparison_df = pd.DataFrame({
    'Factor': factors,
    'Alta Felicidad': high_avg.values,
    'Baja Felicidad': low_avg.values
})

comparison_df.set_index('Factor', inplace=True)
comparison_df

# Crear el gráfico de barras

# Configuración para las barras lado a lado
n_factors = len(factors)
bar_width = 0.35
index = np.arange(n_factors)

# Crear el gráfico de barras lado a lado
fig, ax = plt.subplots(figsize=(12, 8))

bar1 = ax.bar(x=index, height=comparison_df['Alta Felicidad'], width=bar_width, label='Alta Felicidad', color='green')
bar2 = ax.bar(x=index + bar_width, height=comparison_df['Baja Felicidad'], width=bar_width, label='Baja Felicidad', color='red')

# Etiquetas y título
ax.set_xlabel('Factores')
ax.set_ylabel('Valores Promedio')
ax.set_title('Comparación de Factores entre Alta y Baja Felicidad')
ax.set_xticks(index + bar_width / 2)
ax.set_xticklabels(factors, rotation=45)
ax.axhline(0, color='black', linewidth=0.8)

# Añadir leyenda
ax.legend()

# Mostrar el gráfico
plt.tight_layout()
plt.show()

"""Los países con alta felicidad tienen mayor PIB, soporte social, espeanza de vida, y libertad y percepción de la corrupción"""